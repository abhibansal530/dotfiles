#+TITLE: Emacs Config
#+STARTUP: fold

* Startup
#+BEGIN_SRC emacs-lisp :comments no
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC
* Personal Info
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Abhishek Bansal"
      user-mail-address "abhibansal530@gmail.com")
#+END_SRC
* Theme and look
** Font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Meslo LG S for Powerline" :size 16))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox)
#+END_SRC
** Misc
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC
* Org mode
** Defaults
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
#+END_SRC

** Main
#+BEGIN_SRC emacs-lisp
(after! org
  (require 'find-lisp)
  (setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.11.0_1/libexec/ditaa-0.11.0-standalone.jar")
  (setq org-startup-folded t)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "SOMEDAY(s)" "PROJECT(p)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

  ;; Alghout all of these are not required for agenda, but adding these allow for searching tags across all these files.
  (setq org-agenda-files (append '("~/org/gtd/inbox.org" "~/org/gtd/life.org" "~/org/gtd/projects.org")
                                 (directory-files-recursively "~/org/resources" "\\.org$")))

  (setq org-complete-tags-always-offer-all-agenda-tags t)

  (setq org-refile-allow-creating-parent-nodes 'confirm)

  (setq org-refile-targets '(("~/org/gtd/projects.org" :maxlevel . 1)
                             ("~/org/gtd/life.org" :maxlevel . 3))))
#+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
(after! org-capture
  (setq org-capture-templates
        `(("i" "Inbox")

          ("iP" "Personal inbox" entry
           (file "~/org/gtd/inbox.org")
           (file "~/org/capture-templates/inbox.txt")
           :empty-lines-after 1)

          ("iW" "Work inbox" entry
           (file "~/org/gtd/work/inbox.org")
           (file "~/org/capture-templates/inbox.txt")
           :empty-lines-after 1)

          ("c" "org-protocol-capture" entry
           (file "~/org/gtd/inbox.org")
           (file "~/org/capture-templates/protocol.txt")
           :immediate-finish t)

          ("g" "GTD templates")

          ("gp" "Create a daily plan")

          ("gpP" "Daily plan private" plain
           (file+olp+datetree "~/org/gtd/planner.org")
           (file "~/org/capture-templates/daily-plan.txt")
           :immediate-finish t)

          ("gpW" "Daily plan work" plain
           (file+olp+datetree "~/org/gtd/work/planner.org")
           (file "~/org/capture-templates/daily-plan-work.txt")
           :immediate-finish t)

          ("gr" "Review templates")

          ("grd" "Daily review" plain
           (file+olp+datetree "~/org/gtd/life.org" "GTD" "Daily Review")
           (file "~/org/capture-templates/daily-review.txt")
           :immediate-finish t
           :jump-to-captured t)

          ("grw" "Weekly review" plain
           (file+olp+datetree "~/org/gtd/life.org" "GTD" "Weekly Review")
           (file "~/org/capture-templates/weekly-review.txt")
           :immediate-finish t
           :jump-to-captured t)

          ("r" "Capture a resource")

          ("rB" "Book" entry
           (file "~/org/resources/books.org")
           (file "~/org/capture-templates/book.txt")
           :empty-lines-after 2))))
#+END_SRC
** Protocol
Setup org-protocol to enable capture using firefox
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/org-mode/lisp/org-protocol.el")
(require 'org-protocol)
#+END_SRC
** Agenda
Define custom agenda views.
#+BEGIN_SRC emacs-lisp
(use-package! org-agenda
  :init
  :config
  (setq abhi/org-agenda-directory "~/org/gtd/")
  (setq org-columns-default-format "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")
  (setq org-agenda-custom-commands `(("c" "Agenda"
                                      ((agenda ""
                                               ((org-agenda-span 'week)
                                                (org-deadline-warning-days 365)))
                                       (todo "TODO"
                                             ((org-agenda-overriding-header "To Refile")
                                              (org-agenda-files '(,(concat abhi/org-agenda-directory "inbox.org")))))
                                       (todo "NEXT"
                                             ((org-agenda-overriding-header "In Progress")
                                              (org-agenda-files '(,(concat abhi/org-agenda-directory "projects.org")
                                                                  ,(concat abhi/org-agenda-directory "next.org")))
                                              ))
                                       (todo "TODO"
                                             ((org-agenda-overriding-header "Projects")
                                              (org-agenda-files '(,(concat abhi/org-agenda-directory "projects.org")))
                                              ))
                                       (todo "TODO"
                                             ((org-agenda-overriding-header "One-off Tasks")
                                              (org-agenda-files '(,(concat abhi/org-agenda-directory "next.org")))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))))

                                     ("i" "Inbox"
                                      ((todo ""
                                            ((org-agenda-overriding-header "To Refile")
                                             (org-agenda-files '(,(concat abhi/org-agenda-directory "inbox.org"))))))))))
#+END_SRC
** Roam
#+BEGIN_SRC emacs-lisp
(use-package! org-roam
  :hook
  (after-init . org-roam-mode)
  :config
  (setq org-roam-ref-capture-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "${slug}"
           :head "#+TITLE: ${title}
    #+ROAM_KEY: ${ref}
    #+ROAM_TAGS: Website
    - source :: ${ref}"
           :unnarrowed t)))
  (setq +org-roam-open-buffer-on-find-file nil))
#+END_SRC
** Journal
Store journal entries inside roam directory.
#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :custom
  (org-journal-dir (concat org-roam-directory "/journal"))
  (org-journal-date-prefix "#+TITLE: ")
  (org-journal-file-format "%Y-%m-%d.org")
  (org-journal-date-format "%A, %d %B %Y"))
#+END_SRC
** Refile
My custom hydra for refiling. Ref :
- http://www.howardism.org/Technical/Emacs/getting-more-boxes-done.html
- https://mollermara.com/blog/Fast-refiling-in-org-mode-with-hydras/

#+BEGIN_SRC emacs-lisp
(defmacro my-org-make-refile-command (fn-suffix refile-targets)
  "Generate a command to call `org-refile' with modified targets."
  `(defun ,(intern (concat "my-org-refile-" (symbol-name fn-suffix))) ()
     ,(format "`org-refile' to %S" refile-targets)
     (interactive)
     (org-refile-cache-clear)
     (let ((org-refile-target-verify-function nil)
           (org-refile-history nil)
           (org-refile-targets ,refile-targets))
       (if (eq major-mode 'org-agenda-mode)
           (call-interactively 'org-agenda-refile)
         (call-interactively 'org-refile)))))

(my-org-make-refile-command book '(("~/org/resources/books.org" :maxlevel . 2)))
(my-org-make-refile-command course '(("~/org/resources/courses.org" :maxlevel . 1)))
(my-org-make-refile-command link '(("~/org/resources/links.org" :maxlevel . 1)))
(my-org-make-refile-command paper '(("~/org/resources/papers.org" :maxlevel . 1)))
(my-org-make-refile-command read '(("~/org/resources/readings.org" :maxlevel . 1)))
(my-org-make-refile-command watch '(("~/org/resources/watch.org" :maxlevel . 1)))
(my-org-make-refile-command project '(("~/org/gtd/projects.org" :maxlevel . 1)))
(my-org-make-refile-command people '(("~/org/resources/people.org" :maxlevel . 1)))

(defhydra my-org-refile-hydra (:hint nil :foreign-keys run)
  "
^Refile^            ^Goto^                     ^Dired^
------------------------------------------------------
_p_: Projects       _g j_: Last refile         _d r_: Resources
_P_: Papers         _g r_: To Read
_b_: Books          _g p_: Projects
_c_: Courses
_l_: Links
_r_: To Read
_w_: To Watch
_o_: People
_R_: Refile
"
  ("b" my-org-refile-book)
  ("c" my-org-refile-course)
  ("l" my-org-refile-link)
  ("p" my-org-refile-project)
  ("P" my-org-refile-paper)
  ("r" my-org-refile-read)
  ("w" my-org-refile-watch)
  ("o" my-org-refile-people)
  ("R" org-refile)
  ("g j" org-refile-goto-last-stored :exit t)
  ("g r" (find-file-other-window "~/org/resources/readings.org") :exit t)
  ("g p" (find-file-other-window "~/org/gtd/projects.org") :exit t)
  ("d r" (dired "~/org/resources") :exit t)
  ("q" nil "cancel"))

(global-set-key (kbd "<f9> r") 'my-org-refile-hydra/body)
#+END_SRC
** Misc
Use deft for searching org files :
#+BEGIN_SRC emacs-lisp
(use-package deft
      :after org
      :custom
      (deft-recursive t)
      (deft-use-filter-string-for-filename t)
      (deft-default-extension "org")
      (deft-directory org-roam-directory))
#+END_SRC

Don't rememer this one :

#+BEGIN_SRC emacs-lisp
(eval-after-load "artist"
  '(define-key artist-mode-map [(down-mouse-3)] 'artist-mouse-choose-operation)
  )
#+END_SRC
* Applications
** Ebook reading
For reading epubs :
#+BEGIN_SRC emacs-lisp
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-save-place-file (concat doom-cache-dir "nov-places")))
#+END_SRC
** RSS
*** Config
Path to feed file.
#+BEGIN_SRC emacs-lisp
(setq rmh-elfeed-org-files '("~/org/elfeed.org"))
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
(map! :map elfeed-search-mode-map
      :after elfeed-search
      :n "e" #'elfeed-update
      :n "r" #'elfeed-search-untag-all-unread
      :n "u" #'elfeed-search-tag-all-unread)
#+END_SRC
*** Visual enhancements
These are taken from https://github.com/tecosaur/emacs-config/blob/master/config.org#visual-enhancements
#+BEGIN_SRC emacs-lisp
(after! elfeed

  (elfeed-org)

  (setq elfeed-search-filter "@1-week-ago +unread"
        elfeed-search-print-entry-function '+myrss/elfeed-search-print-entry
        elfeed-show-refresh-function #'+myrss/elfeed-show-refresh--better-style
        elfeed-search-title-min-width 80
        elfeed-search-title-max-width 100
        shr-max-image-proportion 0.6)

  (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
  (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

  (defface elfeed-show-title-face '((t (:weight ultrabold :slant italic :height 1.5)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (defface elfeed-show-author-face `((t (:weight light)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (set-face-attribute 'elfeed-search-title-face nil
                      :foreground 'nil
                      :weight 'light)

  (defadvice! +rss-elfeed-wrap-h-nicer ()
    "Enhances an elfeed entry's readability by wrapping it to a width of
`fill-column' and centering it with `visual-fill-column-mode'."
    :override #'+rss-elfeed-wrap-h
    (setq-local truncate-lines nil
                shr-width 120
                visual-fill-column-center-text t
                default-text-properties '(line-height 1.1))
    (let ((inhibit-read-only t)
          (inhibit-modification-hooks t))
      (visual-fill-column-mode)
      ;; (setq-local shr-current-font '(:family "Merriweather" :height 1.2))
      (set-buffer-modified-p nil)))

  ;; This defines how feed entries will be displayed.
  ;; <Feed Name>   <Entry Title>  <Tags>
  ;; TODO : Fix tags column
  (defun +myrss/elfeed-search-print-entry (entry)
    "Print ENTRY to the buffer."
    (let* ((elfeed-goodies/tag-column-width 40)
           (elfeed-goodies/feed-source-column-width 30)
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (concat (mapconcat 'identity tags ",")))
           (title-width (- (window-width) elfeed-goodies/feed-source-column-width 4))

           (title-column (elfeed-format-column
                          title (elfeed-clamp
                                 elfeed-search-title-min-width
                                 title-width
                                 elfeed-search-title-max-width)
                          :left))
           (tag-column (elfeed-format-column
                        tags-str (elfeed-clamp elfeed-goodies/tag-column-width
                                               elfeed-goodies/tag-column-width
                                               elfeed-goodies/tag-column-width)
                        :right))
           (feed-column (elfeed-format-column
                         feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width)
                         :left)))

      (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
      (insert (propertize title 'face title-faces 'kbd-help title))
      (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
      (setq-local line-spacing 0.2)))

  (defun +myrss/elfeed-show-refresh--better-style ()
    "Update the buffer to match the selected entry, using a mail-style."
    (interactive)
    (let* ((inhibit-read-only t)
           (title (elfeed-entry-title elfeed-show-entry))
           (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
           (author (elfeed-meta elfeed-show-entry :author))
           (link (elfeed-entry-link elfeed-show-entry))
           (tags (elfeed-entry-tags elfeed-show-entry))
           (tagsstr (mapconcat #'symbol-name tags ", "))
           (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
           (content (elfeed-deref (elfeed-entry-content elfeed-show-entry)))
           (type (elfeed-entry-content-type elfeed-show-entry))
           (feed (elfeed-entry-feed elfeed-show-entry))
           (feed-title (elfeed-feed-title feed))
           (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
      (erase-buffer)
      (insert "\n")
      (insert (format "%s\n\n" (propertize title 'face 'elfeed-show-title-face)))
      (insert (format "%s\t" (propertize feed-title 'face 'elfeed-search-feed-face)))
      (when (and author elfeed-show-entry-author)
        (insert (format "%s\n" (propertize author 'face 'elfeed-show-author-face))))
      (insert (format "%s\n\n" (propertize nicedate 'face 'elfeed-log-date-face)))
      (when tags
        (insert (format "%s\n"
                        (propertize tagsstr 'face 'elfeed-search-tag-face))))
      (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
               do (insert (propertize "Enclosure: " 'face 'message-header-name))
               do (elfeed-insert-link (car enclosure))
               do (insert "\n"))
      (insert "\n")
      (if content
          (if (eq type 'html)
              (elfeed-insert-html content base)
            (insert content))
        (insert (propertize "(empty)\n" 'face 'italic)))
      (goto-char (point-min))))
  )
#+END_SRC
*** TODO Tag search
Look into https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/prot-lisp/prot-elfeed.el#L274
