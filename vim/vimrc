"""""""""""""""""""""""""""""""""""""
" Abhishek Bansal Vimrc configuration
"""""""""""""""""""""""""""""""""""""
set encoding=utf-8
set tags=tags;/ " To set ctags tags file
set tabstop=4
set softtabstop=0 noexpandtab
set shiftwidth=4
set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab
set noswapfile

" Vim Plugins {{{

syntax on

set nocompatible

" Disable filetype for vundle
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Utility {{{
Plugin 'scrooloose/nerdtree'  " Navigate files
Plugin 'junegunn/fzf.vim'     " Vim wrapper around fzf
Plugin 'tpope/vim-fugitive'  " Git plugin
" Plugin 'Shougo/deoplete.nvim'   " For autocompletion
" Plugin 'roxma/nvim-yarp'        " Required for deoplete
" Plugin 'roxma/vim-hug-neovim-rpc'  " Required for deoplete
" let g:deoplete#enable_at_startup = 1 " Enable deoplete at startup

" Plugin 'jeetsukumaran/vim-buffergator'  " Buffer management
Plugin 'mileszs/ack.vim'  " Search Tool
Plugin 'jremmen/vim-ripgrep'  " Ripgrep integration
"let g:ackprg = 'ag --nogroup --nocolor --column' " Ag integration
"let g:ackprg = 'ag --vimgrep' " Ag integration
let g:rg_command = 'rg --vimgrep'
let g:ackprg = 'rg --vimgrep' " Rg integration
" }}}

" Text manipulation {{{
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
" }}}
" Theme / Interface {{{
Plugin 'flazz/vim-colorschemes'  " Vim colorschemes
Plugin 'morhetz/gruvbox'         " Gruvbox colorscheme
Plugin 'vim-airline/vim-airline'  " Status bar for Vim
Plugin 'vim-airline/vim-airline-themes'  " themes for vim airline
Plugin 'ryanoasis/vim-devicons'  " Cool icons
" }}}
" Generic Programming {{{
" Plugin 'vim-syntastic/syntastic' " Syntax Checker
" Plugin 'majutsushi/tagbar' " Browse tags of current file
Plugin 'tpope/vim-dispatch'  " Vim dispatch
Plugin 'w0rp/ale'
" }}}

call vundle#end()
filetype plugin indent on
" }}}
" Language specific {{{
Plugin 'fatih/vim-go'
" disable go-fmt on save due to tab indentation
let g:go_fmt_autosave = 0
" }}}
" Airline Config {{{

" Always display status line
set laststatus=2

" Use 256 colours
set t_Co=256

let g:airline_theme = 'minimalist'  " Set theme for vim-airline
"let g:airline_theme = 'gruvbox'  " Set theme for vim-airline
let g:airline_powerline_fonts = 1 " Enable powerline fonts for airline
let g:Powerline_symbols = 'unicode'
let g:Powerline_symbols = 'fancy'
let g:airline#extensions#tabline#enabled = 1 " Display all buffers when only one tab is open
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1

" let g:airline_left_sep = "\uE0B4"  " Change glyphs for left arrow
" let g:airline_right_sep = "\uE0B6" " Change glyph for right arrow

" }}}
" Syntastic Config {{{
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 0
" let g:syntastic_cpp_checkers = []
" }}}
" ALE Config {{{
" General
let g:airline#extensions#ale#enabled = 1  " ALE airline integration
let g:ale_set_loclist = 0  " Disable loc-list
let g:ale_set_quickfix = 1  " Use quickfix instead of loc-list
let g:ale_completion_enabled = 1

" Linter
let g:ale_linters_explicit = 1  " Only run linters set in ale_linters
let g:ale_lint_on_enter = 0  " Don't lint on opening file
let g:ale_lint_on_text_changed = 0 " Don't lint on every text change
let g:ale_lint_on_save = 1 " Lint after saving
let g:ale_linters = {'cpp': ['cpplint'], 'rust': ['rls']}
let g:ale_fixers = {'rust': ['rustfmt']}
"let g:ale_cpp_cpplint_executable = '/Users/abhishek.bansal/cpplint.py'
"let g:ale_cpp_clangcheck_executable = ''
let g:ale_cpp_cpplint_linelength = 79
let g:ale_rust_rls_toolchain = 'stable'
"let g:ale_linters_ignore = {'cpp' : ['clangcheck']}

" To Run specific linter manually.
function! RunClangCheck() abort
    try
        let b:ale_linters={'cpp' : ['clangcheck']}
        ALELint
    finally
        unlet b:ale_linters
    endtry
endfunction


" Key Mappings
" Navigate between linting errors.
nnoremap <silent> aj :ALENext<CR>
nnoremap <silent> ak :ALEPrevious<CR>
" Go to definition.
nnoremap <silent> ag :ALEGoToDefinition<CR>
" }}}
" fzf Config {{{
set rtp+=/usr/local/opt/fzf
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
" }}}
" UI Config {{{

set number
set nocompatible
set background=dark
" Backspace fix
set backspace=indent,eol,start
" Don't continue comments when pressing o/O
set formatoptions-=o
set modelines=1

syntax enable

let base16colorspace=256  " Access colors present in 256 colorspace
"let g:gruvbox_contrast_dark='hard'
"colorscheme badwolf
"colorscheme spacegray
colorscheme PaperColor
"colorscheme gruvbox
let g:spacegray_underline_search = 1

filetype indent on " load filetype-specific indentation configuraion

set wildmenu " visual autocompletion for commands in vim
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,*.pyc,node_modules/*
set lazyredraw " redraw only when it is required

set showmatch " highlight matching paranthesis
" }}}
" Searching {{{

set hlsearch " Highlight matches

set incsearch " search as characters are entered
" }}}
" Movements {{{

" move vertically by visual line (not by actual line which arrows do anyway)
nnoremap j gj
nnoremap k gk

" move to beginning/ending of line
" nnoremap B ^
" nnoremap E $

" visually select last inserted text
nnoremap gV `[v`]
" }}}
" Leader Shortcuts {{{
let mapleader = ","
nnoremap <silent> <leader><Space> :nohlsearch<cr><C-L>
" nnoremap <leader>v <C-v>
" nnoremap <leader>h <C-x>

" save session
nnoremap <leader>s :mksession!<CR>

" Ag search
nnoremap <leader>a :Ack!<Space>

" CtrlP Shortcuts to toggle modes
" map <leader>pb :CtrlPBuffer<CR>
" map <leader>pm :CtrlPMixed<CR>
" map <leader>pr :CtrlPMRU<CR>
" Start CtrlP in current directory
" nmap <leader>pc :CtrlP .<CR>
" }}}
" Key Mapping {{{

nnoremap ; :
vnoremap ; :
inoremap jk <ESC>

" Make j/k move screen visible lines, not file lines
nnoremap j gj
nnoremap k gk

" Use tab and shift-tab to cycle through windows.
nnoremap <Tab> <C-W>w
nnoremap <S-Tab> <C-W>W

" NerdTree Toggle
map <C-n> :NERDTreeToggle<CR>

" FZF mappings
nmap <silent> zf :Files<CR>
nmap zb :Buffers<CR>
nmap zm :History<CR>
nmap zl :Lines<CR>
nmap zcl :BLines<CR>
" Better command history with q;
command! CmdHist call fzf#vim#command_history({'right': '40'})
nnoremap q; :CmdHist<CR>

" Better search history
command! QHist call fzf#vim#search_history({'right': '40'})
nnoremap q/ :QHist<CR>

nnoremap <silent> <leader>A :call SearchWordWithAg()<CR>
vnoremap <silent> <leader>A :call SearchVisualSelectionWithAg()<CR>
nnoremap <silent> <leader>/ :execute 'Rg ' . input('Rg/')<CR>
" nnoremap <leader>. :AgIn

" Use fuzzy completion relative filepaths across directory
" imap <expr> <c-x><c-f> fzf#vim#complete#path('git ls-files $(git rev-parse --show-toplevel)')

" End FZF mappings

" */# in visual mode searches for selected text, similar to normal mode
vnoremap * :<C-u>call <SID>VisualSetSearch('/')<cr>/<C-R>=@/<cr><cr>
vnoremap # :<C-u>call <SID>VisualSetSearch('#')<cr>/<C-R>=@/<cr><cr>

" <leader>s starts a find a replace for word under cursor
nnoremap <leader>s :%s/\<<C-R><C-W>\>/<C-R><C-W>/g<Left><Left>

" Git Grep with Ag
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

" Async Make.
nnoremap <silent> <leader>m :execute 'Make! ' . input('Make! ')<CR>

" Run Clang checker.
nnoremap <leader>cc :call RunClangCheck()<CR>

" Tagbar Toggle
" map <C-m> :TagbarToggle<CR>

" Buffergator Toggle
"map <C-b> :BuffergatorToggle<CR>
" Learn using vim navigation
"nnoremap <up> <nop>
"nnoremap <down> <nop>
"nnoremap <left> <nop>
"nnoremap <right> <nop>
"inoremap <up> <nop>
"inoremap <down> <nop>
"inoremap <left> <nop>
"inoremap <right> <nop>
" }}}
" Functions {{{

function! SearchWordWithAg()
  execute 'Rg' expand('<cword>')
endfunction

function! SearchVisualSelectionWithAg() range
  let old_reg = getreg('"')
  let old_regtype = getregtype('"')
  let old_clipboard = &clipboard
  set clipboard&
  normal! ""gvy
  let selection = getreg('"')
  call setreg('"', old_reg, old_regtype)
  let &clipboard = old_clipboard
  execute 'Rg' selection
endfunction

function! SearchWithAgInDirectory(...)
  call fzf#vim#ag(join(a:000[1:], ' '), extend({'dir': a:1}, g:fzf#vim#default_layout))
endfunction
command! -nargs=+ -complete=dir AgIn call SearchWithAgInDirectory(<f-args>)

" Helper for visual search
function! s:VisualSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

" }}}
" vim:foldmethod=marker:foldlevel=0
