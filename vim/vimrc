" Install Plug {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" }}}
" Plugins {{{

" Specify a directory for plugins.
call plug#begin('~/.vim/plugged')

" Gruvbox theme.
Plug 'gruvbox-community/gruvbox'

" Integrate fzf with Vim.
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

" Change working directory to project root.
Plug 'airblade/vim-rooter'

" Navigate and manipulate files in a tree view.
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind']}

" Modify * to also work with visual selections.
Plug 'nelstrom/vim-visual-star-search'

" Toggle comments in various ways.
Plug 'tpope/vim-commentary'

" Surround text with quotes, parenthesis, brackets, and more.
Plug 'tpope/vim-surround'

" A git wrapper.
Plug 'tpope/vim-fugitive'

" Status bar and icons.
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'

" Dispatch tasks from vim.
Plug 'tpope/vim-dispatch'

" Vim LSP support.
Plug 'w0rp/ale'

" Intellisense engine for vim.
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Personal wiki in vim.
Plug 'vimwiki/vimwiki'
Plug 'tbabej/taskwiki'

" Ascii drawing in vim.
Plug 'vim-scripts/DrawIt'

" Tmux related plugins.
if !empty($TMUX)
  " Handle focus events from tmux in vim.
  Plug 'tmux-plugins/vim-tmux-focus-events'

  " Share clipboard between vim and tmux.
  Plug 'roxma/vim-tmux-clipboard'

  " Navigate seamlessly between vim and tmux splits.
  Plug 'christoomey/vim-tmux-navigator'
endif

" Languages and file types.
Plug 'godlygeek/tabular' | Plug 'plasticboy/vim-markdown'
" Plug 'faith/vim-go'

call plug#end()

" }}}
" Basic Settings {{{
" For details use :help 'setting'

set autoindent
set backspace=indent,eol,start
set colorcolumn=80
set encoding=utf-8
set hlsearch
set incsearch
set lazyredraw
set modelines=2
set nocompatible
set noswapfile
set number
set showmatch
set textwidth=80
set t_Co=256
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,*.pyc,node_modules/*
set wildmenu
set ttyfast

" }}}
" GUI {{{

" -----------------------------------------------------------------------------
" Color Settings.
" -----------------------------------------------------------------------------

colorscheme gruvbox
" For Gruvbox to look correct in terminal Vim you'll want to source a palette
" script that comes with the Gruvbox plugin.
"
" Add this to your ~/.profile file:
"   source "$HOME/.vim/plugged/gruvbox/gruvbox_256palette.sh"

" Gruvbox comes with both a dark and light theme.
set background=dark

" Gruvbox has 'hard', 'medium' (default) and 'soft' contrast options.
let g:gruvbox_contrast_light='hard'

" This needs to come last, otherwise the colors aren't correct.
syntax on

" -----------------------------------------------------------------------------
" Status line
" -----------------------------------------------------------------------------

" Always display status line.
set laststatus=2

" Airline Settings.
let g:airline_theme = 'gruvbox'
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'unicode'
let g:Powerline_symbols = 'fancy'
let g:airline#extension#tabline#enabled = 1
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1
" See : https://github.com/fatih/vim-go/issues/71#issuecomment-394808485
let g:airline#extensions#branch#enabled = 0

" }}}
" Key Mappings {{{

" Avoid a shift press.
nnoremap ; :
vnoremap ; :

" Escape is far.
inoremap jk <ESC>

" Seamlessly treat visual lines as actual lines when moving around.
noremap j gj
noremap k gk
noremap <Down> gj
noremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" Use tab and shift-tab to cycle through windows.
nnoremap <Tab> <C-W>w
nnoremap <S-Tab> <C-W>W

" Navigate around splits with a single key combo.
if !empty($TMUX)
  let g:tmux_navigator_no_mappings = 1
  let g:tmux_navigator_disable_when_zoomed = 1

  nnoremap <silent> <C-h> :TmuxNavigateLeft<CR>
  nnoremap <silent> <C-j> :TmuxNavigateDown<CR>
  nnoremap <silent> <C-k> :TmuxNavigateUp<CR>
  nnoremap <silent> <C-l> :TmuxNavigateRight<CR>
else
  nnoremap <silent> <C-h> <C-w><C-h>
  nnoremap <silent> <C-j> <C-w><C-j>
  nnoremap <silent> <C-k> <C-w><C-k>
  nnoremap <silent> <C-l> <C-w><C-l>
endif

" Preview markdown.
if executable('grip')
  nnoremap <buffer><space>m :Dispatch grip -b %<CR>
endif

" -----------------------------------------------------------------------------
" Leader Shortcuts.
" -----------------------------------------------------------------------------

let mapleader = ","

" Clear search highlights.
nnoremap <silent> <leader><Space> :nohlsearch<cr><C-L>

" Find and replace word under cursor
nnoremap <Leader>s :%s/\<<C-R><C-W>\>/<C-R><C-W>/g<Left><Left>
nnoremap <Leader>sc :%s/\<<C-R><C-W>\>/<C-R><C-W>/gc<Left><Left><Left>

" Same as above but replace is limited to visual selection.
xnoremap <Leader>s :s/\<<C-R><C-W>\>/<C-R><C-W>/g<Left><Left>
xnoremap <Leader>sc :s/\<<C-R><C-W>\>/<C-R><C-W>/gc<Left><Left><Left>

" For searching and replacing arbitrary visual selections use these :

" Press * to search for the term under the cursor or a visual selection and
" then press a key below to replace all instances of it in the current file.
nnoremap <Leader>r :%s///g<Left><Left>
nnoremap <Leader>rc :%s///gc<Left><Left><Left>

" Same as above but replace is limited to visual selection.
xnoremap <Leader>r :s///g<Left><Left>
xnoremap <Leader>rc :s///gc<Left><Left><Left>

" }}}
" Plugin Settings {{{

" .............................................................................
" junegunn/fzf.vim
" .............................................................................

" Customize fzf colors to match your color scheme.
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Key Mappings.
nmap <silent> zf :Files<CR>
nmap zb :Buffers<CR>
nmap zm :History<CR>
nmap zl :Lines<CR>
nmap zcl :BLines<CR>

" Better command history with q;
command! CmdHist call fzf#vim#command_history({'right': '40'})
nnoremap q; :CmdHist<CR>

" Better search history
command! QHist call fzf#vim#search_history({'right': '40'})
nnoremap q/ :QHist<CR>

function! SearchWordWithRg()
  execute 'Rg' expand('<cword>')
endfunction

function! SearchVisualSelectionWithRg() range
  let old_reg_val = @x
  normal! gv"xy
  let selection = getreg('x')
  let @s = old_reg_val
  execute 'Rg' selection
endfunction

" Search word under cursor with ripgrep.
nnoremap <silent> <Leader>R :call SearchWordWithRg()<CR>

" Search current visual selection with ripgrep.
vnoremap <silent> <Leader>R :call SearchVisualSelectionWithRg()<CR>

" Invoke ripgrep search prompt.
nnoremap <silent> <Leader>/ :execute 'Rg ' . input('Rg/')<CR>

" .............................................................................
" scrooloose/nerdtree
" .............................................................................

" NerdTree Toggle.
nnoremap <C-n> :NERDTreeToggle<CR>

" Open nerd tree at the current file or close nerd tree if pressed again.
nnoremap <silent> <expr> <Leader>n g:NERDTree.IsOpen() ? "\:NERDTreeClose<CR>" : bufexists(expand('%')) ? "\:NERDTreeFind<CR>" : "\:NERDTree<CR>"

" .............................................................................
" plasticboy/vim-markdown
" .............................................................................

autocmd FileType markdown let b:sleuth_automatic=0
autocmd FileType markdown set conceallevel=0
autocmd FileType markdown normal zR

let g:vim_markdown_frontmatter=1

" .............................................................................
" w0rp/ale
" .............................................................................

" General
let g:airline#extensions#ale#enabled = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_completion_enabled = 1

" Linter
let g:ale_linters_explicit = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_save = 1
let g:ale_linters = {'cpp': ['cpplint'], 'rust': ['rls']}
let g:ale_fixers = {'rust': ['rustfmt']}
let g:ale_cpp_cpplint_executable = '/Users/abhishek.bansal/workspace/main/open_tools/codereview/cpplint.py'
let g:ale_cpp_clangcheck_executable = '/Users/abhishek.bansal/workspace/misc/scripts/clang_check.sh'
let g:ale_cpp_cpplint_linelength = 79
let g:ale_rust_rls_toolchain = 'stable'

" To Run specific linter manually.
function! RunClangCheck() abort
    try
        let b:ale_linters={'cpp' : ['clangcheck']}
        ALELint
    finally
        unlet b:ale_linters
    endtry
endfunction

" Key Mappings.

" Navigate between linting errors.
nnoremap <silent> aj :ALENext<CR>
nnoremap <silent> ak :ALEPrevious<CR>

nnoremap <silent> ag :ALEGoToDefinition<CR>

" .............................................................................
" vimwiki/vimwiki
" .............................................................................

" Make sure vimwiki doesn't own all .md files.
let g:vimwiki_global_ext = 0

" Enable spell checking for wiki files.
autocmd FileType vimwiki set spell spelllang=en_us

" Personal wiki.
let my_wiki = {}
let my_wiki.path = '~/my/wiki/'
let my_wiki.path_html = '~/my/wiki/html/'
let my_wiki.syntax = 'markdown'
let my_wiki.ext = '.md'

" Work related wiki.
" let work_wiki = {}

" List of all wikis.
let g:vimwiki_list = [my_wiki]

" .............................................................................
" neoclide/coc.nvim
" .............................................................................

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other
" plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" :
" "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current
" paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature
" of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like:
" coc-tsserver, coc-python
" nmap <silent> <TAB> <Plug>(coc-range-select)
" xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h
" coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" }}}
" Autocommands {{{

" Update a buffer's contents on focus if it changed outside of Vim.
autocmd FocusGained,BufEnter * :checktime

" Unset paste on InsertLeave.
autocmd InsertLeave * silent! set nopaste

" Enable spell check for git commits.
autocmd BufNewFile,BufRead COMMIT_EDITMSG setlocal spell

" }}}
" Work {{{
" .............................................................................
" Any custom config used at my current work place.
" .............................................................................

" This is based on the assumption that I use a tmux session named 'work' at my
" workplace.

" Using list to handle any newlines in the end.
let s:tmux_session_name = systemlist("tmux display-message -p '#S'")

let s:work_config_file = '~/.vim/work.vim'

if !empty(s:tmux_session_name) && s:tmux_session_name[0] ==? 'work'
                        \ && filereadable(expand(s:work_config_file))
  exe 'source' s:work_config_file
endif

" }}}
" vim:foldmethod=marker:foldlevel=0
